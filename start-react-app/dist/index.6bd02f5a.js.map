{"mappings":"AAAA,8DAA8D;AAC9D,sBAAsB;AACtB,mEAAmE;AACnE,0EAA0E;AAC1E,2EAA2E;AAC3E,uCAAuC;AACvC,SAAS;AACT,yCAAyC;AACzC,wCAAwC;AACxC,KAAK;AACL,gEAAgE;AAChE,qEAAqE;AAErE,2CAA2C;AAC3C,wBAAwB;AAExB,8CAA8C;AAC9C,wBAAwB;AAExB;;;;;;;CAOC,GAED,MAAM,SAAS,MAAM,aAAa,CACjC,OACA;IAAE,IAAI;AAAS,GACf,MAAM,aAAa,CAAC,OAAO;IAAE,IAAI;AAAQ,GAAG;IAC3C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;IAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;CAC9B;AAGF,QAAQ,GAAG,CAAC;AAEZ,MAAM,OAAO,SAAS,UAAU,CAAC,SAAS,cAAc,CAAC;AAEzD,KAAK,MAAM,CAAC","sources":["App.js"],"sourcesContent":["// when creating elements in react it takes three parameters -\r\n//1st is element name,\r\n// 2nd is object{'attributes'} which takes specifies the attributes\r\n//and 3rd is content. It is also props- props and childrens that we passes\r\n// const heading = React.createElement('h1', {}, 'Hello world from react');\r\n// const heading = React.createElement(\r\n// \t'h1',\r\n// \t{ id: 'heading', xyz: 'abc' }, //pops\r\n// \t'Hello world from react', //children\r\n// );\r\n// console.log(heading); //it will give us object(react elemnet)\r\n// const root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\n// // everything will be render to the root\r\n// root.render(heading);\r\n\r\n// This is how to create neasted html in react\r\n//we want to create this\r\n\r\n/**\r\n *   <div id='parent'>\r\n *       <div id='child'>\r\n *           <h1>i am h1 tag</h1>\r\n *           <h2>I am h2 tag</h2>\r\n *       </div>\r\n *   </div>\r\n */\r\n\r\nconst parent = React.createElement(\r\n\t'div',\r\n\t{ id: 'parent' },\r\n\tReact.createElement('div', { id: 'child' }, [\r\n\t\tReact.createElement('h1', {}, 'I am h1 tag'),\r\n\t\tReact.createElement('h2', {}, 'I am h2 tag'),\r\n\t]),\r\n);\r\n\r\nconsole.log(parent);\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(parent);\r\n"],"names":[],"version":3,"file":"index.6bd02f5a.js.map","sourceRoot":"/__parcel_source_root/"}